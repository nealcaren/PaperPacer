{% extends "base.html" %}

{% block title %}Get Started - PaperPacer{% endblock %}

{% block content %}
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

<div class="onboarding-container">
    <!-- Progress Bar -->
    <div class="progress-container">
        <div class="progress-bar">
            <div class="progress-fill" id="progress-fill"></div>
        </div>
        <div class="progress-steps">
            <div class="step active" data-step="1">
                <div class="step-circle">1</div>
                <span class="step-label">Project Info</span>
            </div>
            <div class="step" data-step="2">
                <div class="step-circle">2</div>
                <span class="step-label">Research Phases</span>
            </div>
            <div class="step" data-step="3">
                <div class="step-circle">3</div>
                <span class="step-label">Work Schedule</span>
            </div>
            <div class="step" data-step="4">
                <div class="step-circle">4</div>
                <span class="step-label">Review & Submit</span>
            </div>
        </div>
    </div>

    <form action="{{ url_for('submit_onboarding') }}" method="POST" id="onboarding-form">
        <!-- Step 1: Project Information -->
        <div class="step-content active" data-step="1">
            <div class="step-header">
                <h2>Tell us about your research project</h2>
                <p>We'll use this information to create a personalized timeline for your work.</p>
            </div>
            
            <div class="form-card">
                <div class="form-group">
                    <label for="project_title">Project Title</label>
                    <input type="text" id="project_title" name="project_title" required 
                           placeholder="e.g., The Impact of Social Media on Political Discourse"
                           autocomplete="off">
                    <div class="input-hint">Give your research project a descriptive title</div>
                </div>
                
                <div class="form-group">
                    <label for="thesis_deadline">Final Thesis Deadline</label>
                    <input type="date" id="thesis_deadline" name="thesis_deadline" required>
                    <div class="input-hint">When is your final thesis or project due?</div>
                </div>
            </div>
        </div>  
      <!-- Step 2: Research Phases -->
        <div class="step-content" data-step="2">
            <div class="step-header">
                <h2>Select your research phases</h2>
                <p>Choose the phases that apply to your project. You can always add more later.</p>
            </div>
            
            <div class="phases-grid">
                <div class="phase-toggle" data-phase="literature_review">
                    <input type="checkbox" id="phase_literature_review" name="selected_phases" value="literature_review" checked>
                    <label for="phase_literature_review" class="phase-card">
                        <div class="phase-icon">üìö</div>
                        <div class="phase-content">
                            <h3>Literature Review</h3>
                            <p>Systematic literature search, reading, and synthesis</p>
                            <div class="phase-meta">
                                <span class="duration">~4 weeks</span>
                                <span class="task-count">15 tasks</span>
                            </div>
                        </div>
                        <div class="phase-check">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                                <path d="M16.667 5L7.5 14.167 3.333 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                    </label>
                    <div class="phase-deadline">
                        <label for="literature_review_deadline">Deadline</label>
                        <input type="date" id="literature_review_deadline" name="literature_review_deadline" required>
                    </div>
                </div>
                
                <div class="phase-toggle" data-phase="research_question">
                    <input type="checkbox" id="phase_research_question" name="selected_phases" value="research_question">
                    <label for="phase_research_question" class="phase-card">
                        <div class="phase-icon">‚ùì</div>
                        <div class="phase-content">
                            <h3>Research Question Development</h3>
                            <p>Problem formulation and question refinement</p>
                            <div class="phase-meta">
                                <span class="duration">~2 weeks</span>
                                <span class="task-count">10 tasks</span>
                            </div>
                        </div>
                        <div class="phase-check">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                                <path d="M16.667 5L7.5 14.167 3.333 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                    </label>
                    <div class="phase-deadline">
                        <label for="research_question_deadline">Deadline</label>
                        <input type="date" id="research_question_deadline" name="research_question_deadline">
                    </div>
                </div>           
     <div class="phase-toggle" data-phase="methods_planning">
                    <input type="checkbox" id="phase_methods_planning" name="selected_phases" value="methods_planning">
                    <label for="phase_methods_planning" class="phase-card">
                        <div class="phase-icon">üî¨</div>
                        <div class="phase-content">
                            <h3>Methods Planning</h3>
                            <p>Research design and methodology development</p>
                            <div class="phase-meta">
                                <span class="duration">~3 weeks</span>
                                <span class="task-count">15 tasks</span>
                            </div>
                        </div>
                        <div class="phase-check">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                                <path d="M16.667 5L7.5 14.167 3.333 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                    </label>
                    <div class="phase-deadline">
                        <label for="methods_planning_deadline">Deadline</label>
                        <input type="date" id="methods_planning_deadline" name="methods_planning_deadline">
                    </div>
                </div>
                
                <div class="phase-toggle" data-phase="irb_proposal">
                    <input type="checkbox" id="phase_irb_proposal" name="selected_phases" value="irb_proposal">
                    <label for="phase_irb_proposal" class="phase-card">
                        <div class="phase-icon">üìã</div>
                        <div class="phase-content">
                            <h3>IRB Proposal</h3>
                            <p>Ethics review and compliance documentation</p>
                            <div class="phase-meta">
                                <span class="duration">~2 weeks</span>
                                <span class="task-count">12 tasks</span>
                            </div>
                        </div>
                        <div class="phase-check">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                                <path d="M16.667 5L7.5 14.167 3.333 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                    </label>
                    <div class="phase-deadline">
                        <label for="irb_proposal_deadline">Deadline</label>
                        <input type="date" id="irb_proposal_deadline" name="irb_proposal_deadline">
                    </div>
                </div>
            </div>
            
            <div class="smart-suggestions">
                <button type="button" class="suggestion-btn" id="auto-suggest-deadlines">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                        <path d="M8 1v6l4 2" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                        <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-width="1.5"/>
                    </svg>
                    Auto-suggest deadlines
                </button>
            </div>
        </div>        <!-
- Step 3: Work Schedule -->
        <div class="step-content" data-step="3">
            <div class="step-header">
                <h2>Set your work schedule</h2>
                <p>Tell us when and how intensively you prefer to work on your research.</p>
            </div>
            
            <div class="schedule-presets">
                <h3>Quick Presets</h3>
                <div class="preset-grid">
                    <button type="button" class="preset-card" data-preset="balanced">
                        <div class="preset-icon">‚öñÔ∏è</div>
                        <div class="preset-content">
                            <h4>Balanced Week</h4>
                            <p>Light work Mon-Fri</p>
                        </div>
                    </button>
                    <button type="button" class="preset-card" data-preset="intensive">
                        <div class="preset-icon">üî•</div>
                        <div class="preset-content">
                            <h4>Intensive Schedule</h4>
                            <p>Heavy work 3 days/week</p>
                        </div>
                    </button>
                    <button type="button" class="preset-card" data-preset="weekend">
                        <div class="preset-icon">üèñÔ∏è</div>
                        <div class="preset-content">
                            <h4>Weekend Warrior</h4>
                            <p>Focus on weekends</p>
                        </div>
                    </button>
                </div>
            </div>
            
            <div class="schedule-custom">
                <h3>Custom Schedule</h3>
                <div class="intensity-legend">
                    <div class="legend-item">
                        <div class="legend-dot none"></div>
                        <span>No Work</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-dot light"></div>
                        <span>Light (1 task)</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-dot heavy"></div>
                        <span>Heavy (2 tasks)</span>
                    </div>
                </div>
                
                <div class="days-grid">
                    {% for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] %}
                    <div class="day-card">
                        <div class="day-header">
                            <span class="day-name">{{ day }}</span>
                        </div>
                        <div class="intensity-selector">
                            <input type="radio" id="{{ day.lower() }}_none" name="{{ day.lower() }}_intensity" value="none" checked>
                            <label for="{{ day.lower() }}_none" class="intensity-option none">
                                <span class="intensity-dot"></span>
                            </label>
                            
                            <input type="radio" id="{{ day.lower() }}_light" name="{{ day.lower() }}_intensity" value="light">
                            <label for="{{ day.lower() }}_light" class="intensity-option light">
                                <span class="intensity-dot"></span>
                            </label>
                            
                            <input type="radio" id="{{ day.lower() }}_heavy" name="{{ day.lower() }}_intensity" value="heavy">
                            <label for="{{ day.lower() }}_heavy" class="intensity-option heavy">
                                <span class="intensity-dot"></span>
                            </label>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>       
 <!-- Step 4: Review & Submit -->
        <div class="step-content" data-step="4">
            <div class="step-header">
                <h2>Review your project setup</h2>
                <p>Everything looks good? Let's create your personalized research timeline.</p>
            </div>
            
            <div class="review-sections">
                <div class="review-card">
                    <h3>Project Information</h3>
                    <div class="review-item">
                        <span class="review-label">Title:</span>
                        <span class="review-value" id="review-title">-</span>
                    </div>
                    <div class="review-item">
                        <span class="review-label">Final Deadline:</span>
                        <span class="review-value" id="review-deadline">-</span>
                    </div>
                </div>
                
                <div class="review-card">
                    <h3>Research Phases</h3>
                    <div id="review-phases">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>
                
                <div class="review-card">
                    <h3>Work Schedule</h3>
                    <div id="review-schedule">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>
            </div>
            
            <div class="autosave-indicator">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                    <path d="M13.5 3.5L6 11l-3.5-3.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span>Your progress is automatically saved</span>
            </div>
        </div>

        <!-- Navigation -->
        <div class="step-navigation">
            <button type="button" class="btn-secondary" id="prev-btn" style="display: none;">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                    <path d="M10 12L6 8l4-4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Previous
            </button>
            
            <button type="button" class="btn-primary" id="next-btn">
                Next
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                    <path d="M6 4l4 4-4 4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
            
            <button type="submit" class="btn-primary" id="submit-btn" style="display: none;">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                    <path d="M13.5 3.5L6 11l-3.5-3.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Create My Project
            </button>
        </div>
    </form>
</div>

<script>
// Modern Onboarding JavaScript
class OnboardingWizard {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 4;
        this.formData = {};
        
        this.init();
        this.loadFromStorage();
    }
    
    init() {
        this.bindEvents();
        this.updateProgress();
        this.initPhaseToggles();
        this.initPresets();
        this.initAutoSave();
    }
    
    bindEvents() {
        // Navigation
        document.getElementById('next-btn').addEventListener('click', () => this.nextStep());
        document.getElementById('prev-btn').addEventListener('click', () => this.prevStep());
        document.getElementById('submit-btn').addEventListener('click', (e) => this.handleSubmit(e));
        
        // Auto-suggest deadlines
        document.getElementById('auto-suggest-deadlines').addEventListener('click', () => this.autoSuggestDeadlines());
        
        // Form inputs
        document.getElementById('project_title').addEventListener('input', (e) => this.saveToStorage());
        document.getElementById('thesis_deadline').addEventListener('change', (e) => this.saveToStorage());
        
        // Keyboard navigation
        document.addEventListener('keydown', (e) => this.handleKeyboard(e));
    }
    
    initPhaseToggles() {
        const phaseToggles = document.querySelectorAll('.phase-toggle');
        
        phaseToggles.forEach(toggle => {
            const checkbox = toggle.querySelector('input[type="checkbox"]');
            const card = toggle.querySelector('.phase-card');
            
            card.addEventListener('click', (e) => {
                e.preventDefault();
                checkbox.checked = !checkbox.checked;
                this.updatePhaseToggle(toggle);
                this.saveToStorage();
            });
            
            checkbox.addEventListener('change', () => {
                this.updatePhaseToggle(toggle);
                this.saveToStorage();
            });
            
            // Initialize state
            this.updatePhaseToggle(toggle);
        });
    }
    
    updatePhaseToggle(toggle) {
        const checkbox = toggle.querySelector('input[type="checkbox"]');
        const deadline = toggle.querySelector('.phase-deadline');
        const deadlineInput = deadline.querySelector('input[type="date"]');
        
        if (checkbox.checked) {
            toggle.classList.add('active');
            deadline.style.display = 'block';
            deadlineInput.required = true;
        } else {
            toggle.classList.remove('active');
            deadline.style.display = 'none';
            deadlineInput.required = false;
            deadlineInput.value = '';
        }
    }
    
    initPresets() {
        const presetCards = document.querySelectorAll('.preset-card');
        
        presetCards.forEach(card => {
            card.addEventListener('click', () => {
                // Remove active from all cards
                presetCards.forEach(c => c.classList.remove('active'));
                card.classList.add('active');
                
                const preset = card.dataset.preset;
                this.applyPreset(preset);
                this.saveToStorage();
            });
        });
    }
    
    applyPreset(preset) {
        const presets = {
            balanced: {
                monday: 'light', tuesday: 'light', wednesday: 'light', 
                thursday: 'light', friday: 'light', saturday: 'none', sunday: 'none'
            },
            intensive: {
                monday: 'heavy', tuesday: 'none', wednesday: 'heavy', 
                thursday: 'none', friday: 'heavy', saturday: 'none', sunday: 'none'
            },
            weekend: {
                monday: 'none', tuesday: 'none', wednesday: 'none', 
                thursday: 'none', friday: 'light', saturday: 'heavy', sunday: 'heavy'
            }
        };
        
        const schedule = presets[preset];
        if (!schedule) return;
        
        Object.entries(schedule).forEach(([day, intensity]) => {
            const radio = document.querySelector(`input[name="${day}_intensity"][value="${intensity}"]`);
            if (radio) radio.checked = true;
        });
    }
    
    nextStep() {
        if (!this.validateCurrentStep()) return;
        
        if (this.currentStep < this.totalSteps) {
            this.currentStep++;
            this.updateStep();
            this.updateProgress();
            this.saveToStorage();
        }
    }
    
    prevStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.updateStep();
            this.updateProgress();
            this.saveToStorage();
        }
    }
    
    updateStep() {
        // Hide all step content
        document.querySelectorAll('.step-content').forEach(step => {
            step.classList.remove('active');
        });
        
        // Show current step
        const currentStepContent = document.querySelector(`[data-step="${this.currentStep}"]`);
        if (currentStepContent) {
            currentStepContent.classList.add('active');
        }
        
        // Update step indicators
        document.querySelectorAll('.progress-steps .step').forEach((step, index) => {
            if (index + 1 <= this.currentStep) {
                step.classList.add('active');
            } else {
                step.classList.remove('active');
            }
        });
        
        // Update navigation buttons
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const submitBtn = document.getElementById('submit-btn');
        
        prevBtn.style.display = this.currentStep > 1 ? 'flex' : 'none';
        
        if (this.currentStep === this.totalSteps) {
            nextBtn.style.display = 'none';
            submitBtn.style.display = 'flex';
            this.updateReview();
        } else {
            nextBtn.style.display = 'flex';
            submitBtn.style.display = 'none';
        }
    }
    
    updateProgress() {
        const progressFill = document.getElementById('progress-fill');
        const percentage = (this.currentStep / this.totalSteps) * 100;
        progressFill.style.width = `${percentage}%`;
    }
    
    validateCurrentStep() {
        const currentStepContent = document.querySelector(`[data-step="${this.currentStep}"]`);
        if (!currentStepContent) return false;
        
        const requiredInputs = currentStepContent.querySelectorAll('input[required]');
        let isValid = true;
        
        requiredInputs.forEach(input => {
            if (!input.value.trim()) {
                input.style.borderColor = '#ef4444';
                isValid = false;
            } else {
                input.style.borderColor = '#e5e7eb';
            }
        });
        
        // Special validation for step 2 (phases)
        if (this.currentStep === 2) {
            const selectedPhases = document.querySelectorAll('input[name="selected_phases"]:checked');
            if (selectedPhases.length === 0) {
                alert('Please select at least one research phase.');
                return false;
            }
            
            // Validate deadlines for selected phases
            let deadlineValid = true;
            selectedPhases.forEach(phase => {
                const phaseValue = phase.value;
                const deadlineInput = document.querySelector(`input[name="${phaseValue}_deadline"]`);
                if (!deadlineInput.value) {
                    deadlineInput.style.borderColor = '#ef4444';
                    deadlineValid = false;
                } else {
                    deadlineInput.style.borderColor = '#e5e7eb';
                }
            });
            
            if (!deadlineValid) {
                alert('Please set deadlines for all selected phases.');
                return false;
            }
        }
        
        return isValid;
    }
    
    autoSuggestDeadlines() {
        const thesisDeadline = document.getElementById('thesis_deadline').value;
        if (!thesisDeadline) {
            alert('Please set your thesis deadline first.');
            return;
        }
        
        const thesisDate = new Date(thesisDeadline);
        const selectedPhases = document.querySelectorAll('input[name="selected_phases"]:checked');
        
        if (selectedPhases.length === 0) {
            alert('Please select your research phases first.');
            return;
        }
        
        // Calculate suggested deadlines working backwards from thesis deadline
        const phaseDurations = {
            'literature_review': 30, // 30 days
            'research_question': 14, // 14 days  
            'methods_planning': 21, // 21 days
            'irb_proposal': 14 // 14 days
        };
        
        let currentDate = new Date(thesisDate);
        const phases = Array.from(selectedPhases).reverse(); // Work backwards
        
        phases.forEach(phase => {
            const phaseValue = phase.value;
            const duration = phaseDurations[phaseValue] || 14;
            
            currentDate.setDate(currentDate.getDate() - duration);
            
            const deadlineInput = document.querySelector(`input[name="${phaseValue}_deadline"]`);
            if (deadlineInput) {
                deadlineInput.value = currentDate.toISOString().split('T')[0];
            }
        });
        
        this.saveToStorage();
    }
    
    updateReview() {
        // Update project info
        const title = document.getElementById('project_title').value;
        const deadline = document.getElementById('thesis_deadline').value;
        
        document.getElementById('review-title').textContent = title || '-';
        document.getElementById('review-deadline').textContent = deadline || '-';
        
        // Update phases
        const selectedPhases = document.querySelectorAll('input[name="selected_phases"]:checked');
        const reviewPhases = document.getElementById('review-phases');
        reviewPhases.innerHTML = '';
        
        selectedPhases.forEach(phase => {
            const phaseValue = phase.value;
            const phaseName = this.getPhaseDisplayName(phaseValue);
            const deadlineInput = document.querySelector(`input[name="${phaseValue}_deadline"]`);
            const deadline = deadlineInput ? deadlineInput.value : '-';
            
            const phaseItem = document.createElement('div');
            phaseItem.className = 'review-item';
            phaseItem.innerHTML = `
                <span class="review-label">${phaseName}:</span>
                <span class="review-value">${deadline}</span>
            `;
            reviewPhases.appendChild(phaseItem);
        });
        
        // Update schedule
        const reviewSchedule = document.getElementById('review-schedule');
        reviewSchedule.innerHTML = '';
        
        const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
        const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        
        days.forEach((day, index) => {
            const selectedIntensity = document.querySelector(`input[name="${day}_intensity"]:checked`);
            const intensity = selectedIntensity ? selectedIntensity.value : 'none';
            
            if (intensity !== 'none') {
                const scheduleItem = document.createElement('div');
                scheduleItem.className = 'review-item';
                scheduleItem.innerHTML = `
                    <span class="review-label">${dayNames[index]}:</span>
                    <span class="review-value">${intensity.charAt(0).toUpperCase() + intensity.slice(1)}</span>
                `;
                reviewSchedule.appendChild(scheduleItem);
            }
        });
    }
    
    getPhaseDisplayName(phaseType) {
        const names = {
            'literature_review': 'Literature Review',
            'research_question': 'Research Question Development',
            'methods_planning': 'Methods Planning',
            deadline.style.display = 'none';
            deadlineInput.required = false;
            deadlineInput.value = '';
        }
    }
    
    initPresets() {
        const presetCards = document.querySelectorAll('.preset-card');
        
        presetCards.forEach(card => {
            card.addEventListener('click', () => {
                const preset = card.dataset.preset;
                this.applyPreset(preset);
                
                // Update active state
                presetCards.forEach(c => c.classList.remove('active'));
                card.classList.add('active');
            });
        });
    }
    
    applyPreset(preset) {
        const presets = {
            balanced: {
                monday: 'light', tuesday: 'light', wednesday: 'light', 
                thursday: 'light', friday: 'light', saturday: 'none', sunday: 'none'
            },
            intensive: {
                monday: 'heavy', tuesday: 'none', wednesday: 'heavy', 
                thursday: 'none', friday: 'heavy', saturday: 'none', sunday: 'none'
            },
            weekend: {
                monday: 'none', tuesday: 'none', wednesday: 'none', 
                thursday: 'none', friday: 'none', saturday: 'heavy', sunday: 'heavy'
            }
        };
        
        const config = presets[preset];
        if (!config) return;
        
        Object.entries(config).forEach(([day, intensity]) => {
            const radio = document.querySelector(`input[name="${day}_intensity"][value="${intensity}"]`);
            if (radio) radio.checked = true;
        });
        
        this.saveToStorage();
    }
    
    autoSuggestDeadlines() {
        const thesisDeadline = document.getElementById('thesis_deadline').value;
        if (!thesisDeadline) {
            alert('Please set your thesis deadline first.');
            return;
        }
        
        const thesisDate = new Date(thesisDeadline);
        const selectedPhases = document.querySelectorAll('input[name="selected_phases"]:checked');
        
        if (selectedPhases.length === 0) {
            alert('Please select at least one research phase first.');
            return;
        }
        
        // Calculate suggested deadlines working backwards from thesis deadline
        const phaseDurations = {
            'literature_review': 4 * 7, // 4 weeks in days
            'research_question': 2 * 7, // 2 weeks in days
            'methods_planning': 3 * 7,   // 3 weeks in days
            'irb_proposal': 2 * 7        // 2 weeks in days
        };
        
        let currentDate = new Date(thesisDate);
        const phases = Array.from(selectedPhases).map(cb => cb.value).reverse();
        
        phases.forEach(phaseType => {
            const duration = phaseDurations[phaseType] || 14;
            currentDate.setDate(currentDate.getDate() - duration);
            
            const deadlineInput = document.getElementById(`${phaseType}_deadline`);
            if (deadlineInput) {
                deadlineInput.value = currentDate.toISOString().split('T')[0];
            }
        });
        
        this.saveToStorage();
    }
    
    nextStep() {
        if (this.validateCurrentStep()) {
            if (this.currentStep < this.totalSteps) {
                this.currentStep++;
                this.updateStep();
                this.updateProgress();
                this.saveToStorage();
            }
        }
    }
    
    prevStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.updateStep();
            this.updateProgress();
        }
    }
    
    updateStep() {
        // Update step content visibility
        document.querySelectorAll('.step-content').forEach(content => {
            content.classList.remove('active');
        });
        document.querySelector(`.step-content[data-step="${this.currentStep}"]`).classList.add('active');
        
        // Update step indicators
        document.querySelectorAll('.step').forEach((step, index) => {
            step.classList.toggle('active', index + 1 <= this.currentStep);
        });
        
        // Update navigation buttons
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const submitBtn = document.getElementById('submit-btn');
        
        prevBtn.style.display = this.currentStep > 1 ? 'flex' : 'none';
        
        if (this.currentStep === this.totalSteps) {
            nextBtn.style.display = 'none';
            submitBtn.style.display = 'flex';
            this.updateReview();
        } else {
            nextBtn.style.display = 'flex';
            submitBtn.style.display = 'none';
        }
    }
    
    updateProgress() {
        const progressFill = document.getElementById('progress-fill');
        const percentage = (this.currentStep / this.totalSteps) * 100;
        progressFill.style.width = `${percentage}%`;
    }
    
    validateCurrentStep() {
        switch (this.currentStep) {
            case 1:
                return this.validateProjectInfo();
            case 2:
                return this.validatePhases();
            case 3:
                return this.validateSchedule();
            default:
                return true;
        }
    }
    
    validateProjectInfo() {
        const title = document.getElementById('project_title').value.trim();
        const deadline = document.getElementById('thesis_deadline').value;
        
        if (!title) {
            alert('Please enter a project title.');
            document.getElementById('project_title').focus();
            return false;
        }
        
        if (!deadline) {
            alert('Please set your thesis deadline.');
            document.getElementById('thesis_deadline').focus();
            return false;
        }
        
        const thesisDate = new Date(deadline);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        if (thesisDate <= today) {
            alert('Thesis deadline must be in the future.');
            document.getElementById('thesis_deadline').focus();
            return false;
        }
        
        return true;
    }
    
    validatePhases() {
        const selectedPhases = document.querySelectorAll('input[name="selected_phases"]:checked');
        
        if (selectedPhases.length === 0) {
            alert('Please select at least one research phase.');
            return false;
        }
        
        // Validate deadlines
        const thesisDeadline = new Date(document.getElementById('thesis_deadline').value);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const phaseDeadlines = [];
        
        for (const checkbox of selectedPhases) {
            const phaseType = checkbox.value;
            const deadlineInput = document.getElementById(`${phaseType}_deadline`);
            
            if (!deadlineInput.value) {
                alert(`Please set a deadline for ${this.getPhaseName(phaseType)}.`);
                deadlineInput.focus();
                return false;
            }
            
            const deadline = new Date(deadlineInput.value);
            
            if (deadline <= today) {
                alert(`${this.getPhaseName(phaseType)} deadline must be in the future.`);
                deadlineInput.focus();
                return false;
            }
            
            if (deadline >= thesisDeadline) {
                alert(`${this.getPhaseName(phaseType)} deadline must be before thesis deadline.`);
                deadlineInput.focus();
                return false;
            }
            
            phaseDeadlines.push({ type: phaseType, deadline });
        }
        
        // Check chronological order
        const phaseOrder = ['literature_review', 'research_question', 'methods_planning', 'irb_proposal'];
        const orderedPhases = phaseDeadlines
            .filter(p => phaseOrder.includes(p.type))
            .sort((a, b) => phaseOrder.indexOf(a.type) - phaseOrder.indexOf(b.type));
        
        for (let i = 1; i < orderedPhases.length; i++) {
            if (orderedPhases[i].deadline <= orderedPhases[i-1].deadline) {
                alert(`${this.getPhaseName(orderedPhases[i].type)} must come after ${this.getPhaseName(orderedPhases[i-1].type)}.`);
                return false;
            }
        }
        
        return true;
    }
    
    validateSchedule() {
        const workDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
        const hasWorkDay = workDays.some(day => {
            const intensity = document.querySelector(`input[name="${day}_intensity"]:checked`).value;
            return intensity === 'light' || intensity === 'heavy';
        });
        
        if (!hasWorkDay) {
            alert('Please select at least one day with light or heavy work intensity.');
            return false;
        }
        
        return true;
    }
    
    updateReview() {
        // Update project info
        document.getElementById('review-title').textContent = 
            document.getElementById('project_title').value || '-';
        document.getElementById('review-deadline').textContent = 
            document.getElementById('thesis_deadline').value || '-';
        
        // Update phases
        const reviewPhases = document.getElementById('review-phases');
        const selectedPhases = document.querySelectorAll('input[name="selected_phases"]:checked');
        
        reviewPhases.innerHTML = '';
        selectedPhases.forEach(checkbox => {
            const phaseType = checkbox.value;
            const deadline = document.getElementById(`${phaseType}_deadline`).value;
            
            const phaseItem = document.createElement('div');
            phaseItem.className = 'review-item';
            phaseItem.innerHTML = `
                <span class="review-label">${this.getPhaseName(phaseType)}:</span>
                <span class="review-value">${deadline}</span>
            `;
            reviewPhases.appendChild(phaseItem);
        });
        
        // Update schedule
        const reviewSchedule = document.getElementById('review-schedule');
        const workDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
        
        reviewSchedule.innerHTML = '';
        workDays.forEach(day => {
            const intensity = document.querySelector(`input[name="${day}_intensity"]:checked`).value;
            if (intensity !== 'none') {
                const scheduleItem = document.createElement('div');
                scheduleItem.className = 'review-item';
                scheduleItem.innerHTML = `
                    <span class="review-label">${day.charAt(0).toUpperCase() + day.slice(1)}:</span>
                    <span class="review-value">${intensity.charAt(0).toUpperCase() + intensity.slice(1)}</span>
                `;
                reviewSchedule.appendChild(scheduleItem);
            }
        });
    }
    
    getPhaseName(phaseType) {
        const names = {
            'literature_review': 'Literature Review',
            'research_question': 'Research Question Development',
            'methods_planning': 'Methods Planning',
            'irb_proposal': 'IRB Proposal'
        };
        return names[phaseType] || phaseType;
    }
    
    handleSubmit(e) {
        if (!this.validateCurrentStep()) {
            e.preventDefault();
            return false;
        }
        
        // Clear localStorage on successful submission
        localStorage.removeItem('paperpacer_onboarding');
        return true;
    }
    
    handleKeyboard(e) {
        if (e.key === 'Enter' && e.ctrlKey) {
            if (this.currentStep < this.totalSteps) {
                this.nextStep();
            } else {
                document.getElementById('submit-btn').click();
            }
        } else if (e.key === 'Escape') {
            if (this.currentStep > 1) {
                this.prevStep();
            }
        }
    }
    
    // Auto-save functionality
    initAutoSave() {
        setInterval(() => this.saveToStorage(), 5000); // Save every 5 seconds
    }
    
    saveToStorage() {
        const formData = new FormData(document.getElementById('onboarding-form'));
        const data = {};
        
        for (let [key, value] of formData.entries()) {
            if (data[key]) {
                if (Array.isArray(data[key])) {
                    data[key].push(value);
                } else {
                    data[key] = [data[key], value];
                }
            } else {
                data[key] = value;
            }
        }
        
        data.currentStep = this.currentStep;
        localStorage.setItem('paperpacer_onboarding', JSON.stringify(data));
    }
    
    loadFromStorage() {
        const saved = localStorage.getItem('paperpacer_onboarding');
        if (!saved) return;
        
        try {
            const data = JSON.parse(saved);
            
            // Restore form values
            Object.entries(data).forEach(([key, value]) => {
                if (key === 'currentStep') {
                    this.currentStep = value;
                    return;
                }
                
                const input = document.querySelector(`[name="${key}"]`);
                if (input) {
                    if (input.type === 'checkbox' || input.type === 'radio') {
                        if (Array.isArray(value)) {
                            value.forEach(v => {
                                const specificInput = document.querySelector(`[name="${key}"][value="${v}"]`);
                                if (specificInput) specificInput.checked = true;
                            });
                        } else {
                            const specificInput = document.querySelector(`[name="${key}"][value="${value}"]`);
                            if (specificInput) specificInput.checked = true;
                        }
                    } else {
                        input.value = value;
                    }
                }
            });
            
            // Update UI
            this.updateStep();
            this.updateProgress();
            this.initPhaseToggles();
            
        } catch (e) {
            console.error('Failed to load saved data:', e);
        }
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new OnboardingWizard();
});
</script>

{% endblock %}